type Main_region_Controller : { __Inactive__, Operating }
type Operating_Controller : { __Inactive__, Init, PriorityPrepares, Priority, Secondary, SecondaryPrepares, Init_Inactive_, PriorityPrepares_Inactive_, Priority_Inactive_, Secondary_Inactive_, SecondaryPrepares_Inactive_ }
type Main_region_TrafficLightCtrl : { __Inactive__, Interrupted, Normal }
type Interrupted_TrafficLightCtrl : { __Inactive__, Black, BlinkingYellow }
type Normal_TrafficLightCtrl : { __Inactive__, Red, Yellow, Green, Red_Inactive_, Yellow_Inactive_, Green_Inactive_ }
var PoliceInterrupt_police_In_controller : boolean = false
ctrl var main_region_controller : Main_region_Controller = __Inactive__
ctrl var operating_controller : Operating_Controller = __Inactive__
var InitTimeout3_controller : clock
var PoliceInterrupt_police_In_prior : boolean = false
var LightCommands_displayNone_Out_prior : boolean = false
var Control_toggle_In_prior : boolean = false
var LightCommands_displayRed_Out_prior : boolean = false
var LightCommands_displayGreen_Out_prior : boolean = false
var LightCommands_displayYellow_Out_prior : boolean = false
ctrl var main_region_prior : Main_region_TrafficLightCtrl = __Inactive__
ctrl var interrupted_prior : Interrupted_TrafficLightCtrl = __Inactive__
ctrl var normal_prior : Normal_TrafficLightCtrl = __Inactive__
var asd_prior : integer = 0
var b_prior : integer = 0
var a_prior : boolean = false
var BlinkingYellowTimeout3_prior : clock
var LightCommands_displayGreen_Out_second : boolean = false
var PoliceInterrupt_police_In_second : boolean = false
var LightCommands_displayNone_Out_second : boolean = false
var LightCommands_displayRed_Out_second : boolean = false
var LightCommands_displayYellow_Out_second : boolean = false
var Control_toggle_In_second : boolean = false
ctrl var main_region_second : Main_region_TrafficLightCtrl = __Inactive__
ctrl var normal_second : Normal_TrafficLightCtrl = __Inactive__
ctrl var interrupted_second : Interrupted_TrafficLightCtrl = __Inactive__
var asd_second : integer = 0
var a_second : boolean = false
var b_second : integer = 0
var BlinkingYellowTimeout3_second : clock

trans {
	__delay;
	if (((main_region_controller == Operating) && PoliceInterrupt_police_In_controller)) {
		operating_controller := (if (operating_controller == Init) then Init_Inactive_ else (if (operating_controller == PriorityPrepares) then PriorityPrepares_Inactive_ else (if (operating_controller == Priority) then Priority_Inactive_ else (if (operating_controller == Secondary) then Secondary_Inactive_ else SecondaryPrepares_Inactive_))));
		PoliceInterrupt_police_In_prior := true;
		PoliceInterrupt_police_In_second := true;
		main_region_controller := Operating;
		if ((operating_controller == __Inactive__)) {
			operating_controller := Init;
		}
		else {
			operating_controller := (if (operating_controller == Init_Inactive_) then Init else (if (operating_controller == PriorityPrepares_Inactive_) then PriorityPrepares else (if (operating_controller == Priority_Inactive_) then Priority else (if (operating_controller == Secondary_Inactive_) then Secondary else SecondaryPrepares))));
		}
		if ((operating_controller == Init)) {
			InitTimeout3_controller := 0;
			Control_toggle_In_prior := true;
		}
		else {
			if ((operating_controller == PriorityPrepares)) {
				InitTimeout3_controller := 0;
				Control_toggle_In_prior := true;
			}
			else {
				if ((operating_controller == Priority)) {
					InitTimeout3_controller := 0;
					Control_toggle_In_prior := true;
					Control_toggle_In_second := true;
				}
				else {
					if ((operating_controller == Secondary)) {
						InitTimeout3_controller := 0;
						Control_toggle_In_prior := true;
						Control_toggle_In_second := true;
					}
					else {
						if ((operating_controller == SecondaryPrepares)) {
							InitTimeout3_controller := 0;
							Control_toggle_In_second := true;
						}
					}
				}
			}
		}
	}
	else {
		if (((operating_controller == Init) && ((2 * 1000) <= InitTimeout3_controller))) {
			operating_controller := PriorityPrepares;
			InitTimeout3_controller := 0;
			Control_toggle_In_prior := true;
		}
		else {
			if (((operating_controller == PriorityPrepares) && ((1 * 1000) <= InitTimeout3_controller))) {
				operating_controller := Secondary;
				InitTimeout3_controller := 0;
				Control_toggle_In_prior := true;
				Control_toggle_In_second := true;
			}
			else {
				if (((operating_controller == Priority) && ((2 * 1000) <= InitTimeout3_controller) && (true != false))) {
					operating_controller := PriorityPrepares;
					InitTimeout3_controller := 0;
					Control_toggle_In_prior := true;
				}
				else {
					if (((operating_controller == Secondary) && ((2 * 1000) <= InitTimeout3_controller))) {
						operating_controller := SecondaryPrepares;
						InitTimeout3_controller := 0;
						Control_toggle_In_second := true;
					}
					else {
						if (((operating_controller == SecondaryPrepares) && ((1 * 1000) <= InitTimeout3_controller))) {
							operating_controller := Priority;
							InitTimeout3_controller := 0;
							Control_toggle_In_prior := true;
							Control_toggle_In_second := true;
						}
					}
				}
			}
		}
	}
	if (((main_region_prior == Interrupted) && PoliceInterrupt_police_In_prior)) {
		interrupted_prior := __Inactive__;
		main_region_prior := Normal;
		if ((normal_prior == __Inactive__)) {
			normal_prior := Red;
		}
		else {
			normal_prior := (if (normal_prior == Red_Inactive_) then Red else (if (normal_prior == Yellow_Inactive_) then Yellow else Green));
		}
		if ((normal_prior == Red)) {
			LightCommands_displayRed_Out_prior := true;
		}
		else {
			if ((normal_prior == Yellow)) {
				LightCommands_displayYellow_Out_prior := true;
			}
			else {
				if ((normal_prior == Green)) {
					LightCommands_displayGreen_Out_prior := true;
				}
			}
		}
	}
	else {
		if (((main_region_prior == Normal) && PoliceInterrupt_police_In_prior)) {
			if ((main_region_prior == Normal)) {
				if ((normal_prior == Red)) {
					a_prior := true;
				}
				asd_prior := 321;
			}
			normal_prior := (if (normal_prior == Red) then Red_Inactive_ else (if (normal_prior == Yellow) then Yellow_Inactive_ else Green_Inactive_));
			main_region_prior := Interrupted;
			interrupted_prior := BlinkingYellow;
			BlinkingYellowTimeout3_prior := 0;
			LightCommands_displayYellow_Out_prior := true;
		}
		else {
			if (((interrupted_prior == Black) && (500 <= BlinkingYellowTimeout3_prior))) {
				interrupted_prior := BlinkingYellow;
				BlinkingYellowTimeout3_prior := 0;
				LightCommands_displayYellow_Out_prior := true;
			}
			else {
				if (((interrupted_prior == BlinkingYellow) && (500 <= BlinkingYellowTimeout3_prior))) {
					interrupted_prior := Black;
					BlinkingYellowTimeout3_prior := 0;
					LightCommands_displayNone_Out_prior := true;
				}
				else {
					if (((normal_prior == Red) && Control_toggle_In_prior)) {
						if ((normal_prior == Red)) {
							a_prior := true;
						}
						normal_prior := Green;
						LightCommands_displayGreen_Out_prior := true;
					}
					else {
						if (((normal_prior == Yellow) && Control_toggle_In_prior)) {
							normal_prior := Red;
							LightCommands_displayRed_Out_prior := true;
						}
						else {
							if (((normal_prior == Green) && Control_toggle_In_prior)) {
								b_prior := 4;
								normal_prior := Yellow;
								LightCommands_displayYellow_Out_prior := true;
							}
						}
					}
				}
			}
		}
	}
	PoliceInterrupt_police_In_prior := false;
	Control_toggle_In_prior := false;
	if (((main_region_second == Interrupted) && PoliceInterrupt_police_In_second)) {
		interrupted_second := __Inactive__;
		main_region_second := Normal;
		if ((normal_second == __Inactive__)) {
			normal_second := Red;
		}
		else {
			normal_second := (if (normal_second == Red_Inactive_) then Red else (if (normal_second == Yellow_Inactive_) then Yellow else Green));
		}
		if ((normal_second == Red)) {
			LightCommands_displayRed_Out_second := true;
		}
		else {
			if ((normal_second == Yellow)) {
				LightCommands_displayYellow_Out_second := true;
			}
			else {
				if ((normal_second == Green)) {
					LightCommands_displayGreen_Out_second := true;
				}
			}
		}
	}
	else {
		if (((main_region_second == Normal) && PoliceInterrupt_police_In_second)) {
			if ((main_region_second == Normal)) {
				if ((normal_second == Red)) {
					a_second := true;
				}
				asd_second := 321;
			}
			normal_second := (if (normal_second == Red) then Red_Inactive_ else (if (normal_second == Yellow) then Yellow_Inactive_ else Green_Inactive_));
			main_region_second := Interrupted;
			interrupted_second := BlinkingYellow;
			BlinkingYellowTimeout3_second := 0;
			LightCommands_displayYellow_Out_second := true;
		}
		else {
			if (((interrupted_second == Black) && (500 <= BlinkingYellowTimeout3_second))) {
				interrupted_second := BlinkingYellow;
				BlinkingYellowTimeout3_second := 0;
				LightCommands_displayYellow_Out_second := true;
			}
			else {
				if (((interrupted_second == BlinkingYellow) && (500 <= BlinkingYellowTimeout3_second))) {
					interrupted_second := Black;
					BlinkingYellowTimeout3_second := 0;
					LightCommands_displayNone_Out_second := true;
				}
				else {
					if (((normal_second == Red) && Control_toggle_In_second)) {
						if ((normal_second == Red)) {
							a_second := true;
						}
						normal_second := Green;
						LightCommands_displayGreen_Out_second := true;
					}
					else {
						if (((normal_second == Yellow) && Control_toggle_In_second)) {
							normal_second := Red;
							LightCommands_displayRed_Out_second := true;
						}
						else {
							if (((normal_second == Green) && Control_toggle_In_second)) {
								b_second := 4;
								normal_second := Yellow;
								LightCommands_displayYellow_Out_second := true;
							}
						}
					}
				}
			}
		}
	}
	Control_toggle_In_second := false;
	PoliceInterrupt_police_In_second := false;
	PoliceInterrupt_police_In_controller := false;
}
init {
	InitTimeout3_controller := (2 * 1000);
	main_region_controller := __Inactive__;
	operating_controller := __Inactive__;
	PoliceInterrupt_police_In_controller := false;
	b_prior := 0;
	a_prior := false;
	asd_prior := 0;
	BlinkingYellowTimeout3_prior := 500;
	main_region_prior := __Inactive__;
	interrupted_prior := __Inactive__;
	normal_prior := __Inactive__;
	PoliceInterrupt_police_In_prior := false;
	Control_toggle_In_prior := false;
	LightCommands_displayNone_Out_prior := false;
	LightCommands_displayRed_Out_prior := false;
	LightCommands_displayGreen_Out_prior := false;
	LightCommands_displayYellow_Out_prior := false;
	b_second := 0;
	a_second := false;
	asd_second := 0;
	BlinkingYellowTimeout3_second := 500;
	main_region_second := __Inactive__;
	normal_second := __Inactive__;
	interrupted_second := __Inactive__;
	PoliceInterrupt_police_In_second := false;
	Control_toggle_In_second := false;
	LightCommands_displayGreen_Out_second := false;
	LightCommands_displayNone_Out_second := false;
	LightCommands_displayRed_Out_second := false;
	LightCommands_displayYellow_Out_second := false;
	main_region_controller := Operating;
	operating_controller := Init;
	main_region_prior := Normal;
	normal_prior := Red;
	main_region_second := Normal;
	normal_second := Red;
	InitTimeout3_controller := 0;
	Control_toggle_In_prior := true;
	LightCommands_displayRed_Out_prior := true;
	LightCommands_displayRed_Out_second := true;
}
env {
	havoc PoliceInterrupt_police_In_controller;
	LightCommands_displayYellow_Out_prior := false;
	LightCommands_displayGreen_Out_prior := false;
	LightCommands_displayNone_Out_prior := false;
	LightCommands_displayRed_Out_prior := false;
	LightCommands_displayRed_Out_second := false;
	LightCommands_displayYellow_Out_second := false;
	LightCommands_displayGreen_Out_second := false;
	LightCommands_displayNone_Out_second := false;
}
