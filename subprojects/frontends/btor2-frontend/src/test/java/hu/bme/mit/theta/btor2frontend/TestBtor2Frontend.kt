/*
 *  Copyright 2023 Budapest University of Technology and Economics
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package hu.bme.mit.theta.btor2frontend

import hu.bme.mit.theta.btor2.frontend.dsl.gen.Btor2Lexer
import hu.bme.mit.theta.btor2.frontend.dsl.gen.Btor2Parser
import hu.bme.mit.theta.frontend.visitor.Btor2Visitor
import org.antlr.v4.runtime.BailErrorStrategy
import org.antlr.v4.runtime.CharStreams
import org.antlr.v4.runtime.CommonTokenStream
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test

class TestBtor2Frontend {
    @Test
    fun testParseBtor2Circuit() {
        val visitor = Btor2Visitor()
        val c = """
        ; source: https://github.com/aman-goel/avr/tree/92362931700b66684418a991d018c9fbdbebc06f/tests
        ; BTOR description generated by Yosys 0.9+431 (git sha1 4a3b5437, clang 4.0.1-6 -fPIC -Os) for module main.
        1 sort bitvec 1
        2 input 1 clock
        3 input 1 i
        4 sort bitvec 20
        5 const 4 00000000000001100100
        6 state 4 a
        7 init 4 6 5
        8 sort bitvec 32
        9 uext 8 6 12
        10 const 8 00000000000000000000000001100100
        11 eq 1 9 10
        12 uext 8 6 12
        13 const 8 00000000000000000000000011001000
        14 eq 1 12 13
        15 or 1 11 14
        16 not 1 15
        17 output 16 prop_neg
        18 const 1 1
        19 not 1 15
        20 and 1 18 19
        21 bad 20
        22 const 4 00000000000011001000
        23 state 4 b
        24 init 4 23 22
        25 uext 1 15 0 prop
        26 next 4 6 23
        27 next 4 23 6
        ; end of yosys output
        """.trimIndent()

        val input = CharStreams.fromString(c)
        val lexer = Btor2Lexer(input)
        val tokens = CommonTokenStream(lexer)
        val parser = Btor2Parser(tokens)
        parser.errorHandler = BailErrorStrategy()
        val context = parser.btor2()

        context.accept(visitor)

        val sorts = visitor.sorts.toString()
        val nodes = visitor.nodes.toString()

        val expectedSorts = "{1=Btor2BvSort(nid=1, width=1), 4=Btor2BvSort(nid=4, width=20), 8=Btor2BvSort(nid=8, width=32)}"
        val expectedNodes = "{2=Btor2Input(nid=2, sort=Btor2BvSort(nid=1, width=1)), 3=Btor2Input(nid=3, sort=Btor2BvSort(nid=1, width=1)), 5=Btor2Const(nid=5, value=100, sort=Btor2BvSort(nid=4, width=20)), 6=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), 7=Btor2Init(nid=7, sort=Btor2BvSort(nid=4, width=20), state=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), value=Btor2Const(nid=5, value=100, sort=Btor2BvSort(nid=4, width=20))), 9=Btor2ExtOperation(nid=9, sort=Btor2BvSort(nid=8, width=32), operand=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), w=12), 10=Btor2Const(nid=10, value=100, sort=Btor2BvSort(nid=8, width=32)), 11=Btor2BinaryOperation(nid=11, sort=Btor2BvSort(nid=1, width=1), operator=EQ, operand1=Btor2ExtOperation(nid=9, sort=Btor2BvSort(nid=8, width=32), operand=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), w=12), operand2=Btor2Const(nid=10, value=100, sort=Btor2BvSort(nid=8, width=32))), 12=Btor2ExtOperation(nid=12, sort=Btor2BvSort(nid=8, width=32), operand=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), w=12), 13=Btor2Const(nid=13, value=200, sort=Btor2BvSort(nid=8, width=32)), 14=Btor2BinaryOperation(nid=14, sort=Btor2BvSort(nid=1, width=1), operator=EQ, operand1=Btor2ExtOperation(nid=12, sort=Btor2BvSort(nid=8, width=32), operand=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), w=12), operand2=Btor2Const(nid=13, value=200, sort=Btor2BvSort(nid=8, width=32))), 15=Btor2BinaryOperation(nid=15, sort=Btor2BvSort(nid=1, width=1), operator=OR, operand1=Btor2BinaryOperation(nid=11, sort=Btor2BvSort(nid=1, width=1), operator=EQ, operand1=Btor2ExtOperation(nid=9, sort=Btor2BvSort(nid=8, width=32), operand=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), w=12), operand2=Btor2Const(nid=10, value=100, sort=Btor2BvSort(nid=8, width=32))), operand2=Btor2BinaryOperation(nid=14, sort=Btor2BvSort(nid=1, width=1), operator=EQ, operand1=Btor2ExtOperation(nid=12, sort=Btor2BvSort(nid=8, width=32), operand=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), w=12), operand2=Btor2Const(nid=13, value=200, sort=Btor2BvSort(nid=8, width=32)))), 16=Btor2UnaryOperation(nid=16, sort=Btor2BvSort(nid=1, width=1), operator=NOT, operand=Btor2BinaryOperation(nid=15, sort=Btor2BvSort(nid=1, width=1), operator=OR, operand1=Btor2BinaryOperation(nid=11, sort=Btor2BvSort(nid=1, width=1), operator=EQ, operand1=Btor2ExtOperation(nid=9, sort=Btor2BvSort(nid=8, width=32), operand=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), w=12), operand2=Btor2Const(nid=10, value=100, sort=Btor2BvSort(nid=8, width=32))), operand2=Btor2BinaryOperation(nid=14, sort=Btor2BvSort(nid=1, width=1), operator=EQ, operand1=Btor2ExtOperation(nid=12, sort=Btor2BvSort(nid=8, width=32), operand=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), w=12), operand2=Btor2Const(nid=13, value=200, sort=Btor2BvSort(nid=8, width=32))))), 17=Btor2Output(nid=17, operand=Btor2UnaryOperation(nid=16, sort=Btor2BvSort(nid=1, width=1), operator=NOT, operand=Btor2BinaryOperation(nid=15, sort=Btor2BvSort(nid=1, width=1), operator=OR, operand1=Btor2BinaryOperation(nid=11, sort=Btor2BvSort(nid=1, width=1), operator=EQ, operand1=Btor2ExtOperation(nid=9, sort=Btor2BvSort(nid=8, width=32), operand=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), w=12), operand2=Btor2Const(nid=10, value=100, sort=Btor2BvSort(nid=8, width=32))), operand2=Btor2BinaryOperation(nid=14, sort=Btor2BvSort(nid=1, width=1), operator=EQ, operand1=Btor2ExtOperation(nid=12, sort=Btor2BvSort(nid=8, width=32), operand=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), w=12), operand2=Btor2Const(nid=13, value=200, sort=Btor2BvSort(nid=8, width=32)))))), 18=Btor2Const(nid=18, value=1, sort=Btor2BvSort(nid=1, width=1)), 19=Btor2UnaryOperation(nid=19, sort=Btor2BvSort(nid=1, width=1), operator=NOT, operand=Btor2BinaryOperation(nid=15, sort=Btor2BvSort(nid=1, width=1), operator=OR, operand1=Btor2BinaryOperation(nid=11, sort=Btor2BvSort(nid=1, width=1), operator=EQ, operand1=Btor2ExtOperation(nid=9, sort=Btor2BvSort(nid=8, width=32), operand=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), w=12), operand2=Btor2Const(nid=10, value=100, sort=Btor2BvSort(nid=8, width=32))), operand2=Btor2BinaryOperation(nid=14, sort=Btor2BvSort(nid=1, width=1), operator=EQ, operand1=Btor2ExtOperation(nid=12, sort=Btor2BvSort(nid=8, width=32), operand=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), w=12), operand2=Btor2Const(nid=13, value=200, sort=Btor2BvSort(nid=8, width=32))))), 20=Btor2BinaryOperation(nid=20, sort=Btor2BvSort(nid=1, width=1), operator=AND, operand1=Btor2Const(nid=18, value=1, sort=Btor2BvSort(nid=1, width=1)), operand2=Btor2UnaryOperation(nid=19, sort=Btor2BvSort(nid=1, width=1), operator=NOT, operand=Btor2BinaryOperation(nid=15, sort=Btor2BvSort(nid=1, width=1), operator=OR, operand1=Btor2BinaryOperation(nid=11, sort=Btor2BvSort(nid=1, width=1), operator=EQ, operand1=Btor2ExtOperation(nid=9, sort=Btor2BvSort(nid=8, width=32), operand=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), w=12), operand2=Btor2Const(nid=10, value=100, sort=Btor2BvSort(nid=8, width=32))), operand2=Btor2BinaryOperation(nid=14, sort=Btor2BvSort(nid=1, width=1), operator=EQ, operand1=Btor2ExtOperation(nid=12, sort=Btor2BvSort(nid=8, width=32), operand=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), w=12), operand2=Btor2Const(nid=13, value=200, sort=Btor2BvSort(nid=8, width=32)))))), 21=Btor2Bad(nid=21, operand=Btor2BinaryOperation(nid=20, sort=Btor2BvSort(nid=1, width=1), operator=AND, operand1=Btor2Const(nid=18, value=1, sort=Btor2BvSort(nid=1, width=1)), operand2=Btor2UnaryOperation(nid=19, sort=Btor2BvSort(nid=1, width=1), operator=NOT, operand=Btor2BinaryOperation(nid=15, sort=Btor2BvSort(nid=1, width=1), operator=OR, operand1=Btor2BinaryOperation(nid=11, sort=Btor2BvSort(nid=1, width=1), operator=EQ, operand1=Btor2ExtOperation(nid=9, sort=Btor2BvSort(nid=8, width=32), operand=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), w=12), operand2=Btor2Const(nid=10, value=100, sort=Btor2BvSort(nid=8, width=32))), operand2=Btor2BinaryOperation(nid=14, sort=Btor2BvSort(nid=1, width=1), operator=EQ, operand1=Btor2ExtOperation(nid=12, sort=Btor2BvSort(nid=8, width=32), operand=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), w=12), operand2=Btor2Const(nid=13, value=200, sort=Btor2BvSort(nid=8, width=32))))))), 22=Btor2Const(nid=22, value=200, sort=Btor2BvSort(nid=4, width=20)), 23=Btor2State(nid=23, sort=Btor2BvSort(nid=4, width=20)), 24=Btor2Init(nid=24, sort=Btor2BvSort(nid=4, width=20), state=Btor2State(nid=23, sort=Btor2BvSort(nid=4, width=20)), value=Btor2Const(nid=22, value=200, sort=Btor2BvSort(nid=4, width=20))), 25=Btor2ExtOperation(nid=25, sort=Btor2BvSort(nid=1, width=1), operand=Btor2BinaryOperation(nid=15, sort=Btor2BvSort(nid=1, width=1), operator=OR, operand1=Btor2BinaryOperation(nid=11, sort=Btor2BvSort(nid=1, width=1), operator=EQ, operand1=Btor2ExtOperation(nid=9, sort=Btor2BvSort(nid=8, width=32), operand=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), w=12), operand2=Btor2Const(nid=10, value=100, sort=Btor2BvSort(nid=8, width=32))), operand2=Btor2BinaryOperation(nid=14, sort=Btor2BvSort(nid=1, width=1), operator=EQ, operand1=Btor2ExtOperation(nid=12, sort=Btor2BvSort(nid=8, width=32), operand=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), w=12), operand2=Btor2Const(nid=13, value=200, sort=Btor2BvSort(nid=8, width=32)))), w=0), 26=Btor2Next(nid=26, sort=Btor2BvSort(nid=4, width=20), state=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)), value=Btor2State(nid=23, sort=Btor2BvSort(nid=4, width=20))), 27=Btor2Next(nid=27, sort=Btor2BvSort(nid=4, width=20), state=Btor2State(nid=23, sort=Btor2BvSort(nid=4, width=20)), value=Btor2State(nid=6, sort=Btor2BvSort(nid=4, width=20)))}"
        Assertions.assertEquals(sorts.toString(), expectedSorts)
        Assertions.assertEquals(nodes.toString(), expectedNodes)
    }

}